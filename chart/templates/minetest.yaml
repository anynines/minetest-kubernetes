apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "minetest.fullname" . }}
spec:
  selector:
    matchLabels:
      app: {{ include "minetest.fullname" . }}
      component: minetest
  replicas: 1
  template:
    metadata:
      labels:
        app: {{ include "minetest.fullname" . }}
        component: minetest
    spec:
      hostname: minetest-pod
      subdomain: {{ include "minetest.fullname" . }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
      {{- if .Values.backup }}
      - name: backup
        image: busybox
        command:
          - sh
          - -c
          - if [ -e '/config/.minetest' ]; then
              cd /config;
              tar -zcvf $(date +%Y%m%d%H%M).minetest.tgz .minetest;
            fi
        volumeMounts:
          - name: minetest-config
            mountPath: /config
      {{- end }}
      {{- if .Values.setGame }}
      - name: setgame
        image: kubeless/unzip
        command:
          - sh
          - -c
          - mkdir -p /config/.minetest/games/$(echo {{ .Values.gameUrl }} | awk -F "/" '{print $(NF)}');
            cd       /config/.minetest/games/$(echo {{ .Values.gameUrl }} | awk -F "/" '{print $(NF)}');
            curl -L -o game.zip {{ .Values.gameUrl }}/download;
            unzip game.zip; mv $(find . -mindepth 1 -maxdepth 1 -type d)/* .; rmdir $(find . -mindepth 1 -maxdepth 1 -type d);
            mkdir -p /config/.minetest/main-config/;
            echo "default_game = $(echo {{ .Values.gameUrl }} | awk -F "/" '{print $(NF)}')" > /config/.minetest/main-config/minetest.conf;
            echo "prometheus_listener_address = 0.0.0.0:9009" >> /config/.minetest/main-config/minetest.conf;
        volumeMounts:
          - name: minetest-config
            mountPath: /config
      {{- end }}
      {{- if .Values.setOptions }}
      - name: options
        image: kubeless/unzip
        command:
          - sh
          - -c
          - |
            echo """
            enable_damage = {{ .Values.enableDamage }}
            creative_mode = {{ .Values.creativeMode }}
            free_mode = {{ .Values.freeMode }}
            fast_mode = {{ .Values.fastMode }}
            autojump = {{ .Values.autojump }}
            time_speed = {{ .Values.timeSpeed }}
            """ >> /config/.minetest/main-config/minetest.conf
        volumeMounts:
          - name: minetest-config
            mountPath: /config
      {{- end }}
      containers:
      - name: minetest
        image: {{ .Values.image.minetest.repository }}:{{ default .Values.minetestVersion .Values.image.minetest.tag }}
        imagePullPolicy: Always
        volumeMounts:
          - name: minetest-config
            mountPath: /config/.minetest
            subPath: .minetest
          {{- if .Values.worldmtSecretName }}
          - name: minetest-worldmt
            readOnly: false
            mountPath: "/config/.minetest/worlds/world/world.mt"
            subPath: world.mt
          {{- end }}
        env:
          - name: TZ
            value: "{{ default .Values.minetestTimezone }}"
          - name: CLI_ARGS
            value: "{{ .Values.cliArgs }}"
        ports:
          - name: minetest
            containerPort: 30000
            hostPort: {{ .Values.minetestPort }}
            protocol: UDP
          - name: prometheus
            containerPort: 9009
            hostPort: 9009
            protocol: TCP
        {{- with .Values.resources }}
        resources:
        {{- .|toYaml|nindent 10}}
        {{- end }}
      volumes:
        - name: minetest-config
          persistentVolumeClaim:
            claimName: {{ include "minetest.fullname" . }}-config
      {{- if .Values.worldmtSecretName }}
        - name: minetest-worldmt
          secret:
            secretName: {{ .Values.worldmtSecretName }}
            items:
              - key: world.mt
                path: world.mt
      {{- end }}
      restartPolicy: Always
      terminationGracePeriodSeconds: 60
  strategy:
    type: Recreate

---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "minetest.fullname" . }}
  labels:
    app: {{ include "minetest.fullname" . }}
    component: minetest
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "udp"
spec:
  type: {{ .Values.service.type }}
  {{- if (or (eq .Values.service.type "LoadBalancer") (eq .Values.service.type "NodePort")) }}
  externalTrafficPolicy: {{ .Values.service.externalTrafficPolicy | quote }}
  {{- end }}
  selector:
    app: {{ include "minetest.fullname" . }}
    component: minetest
  ports:
  - name: minetest
    port: {{ .Values.minetestPort }}
    protocol: UDP
